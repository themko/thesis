#Standar (non-var) Sequence-to-Sequence encoder 
import numpy as np
from keras.preprocessing import sequence
from keras.datasets import imdb
from keras.models import Sequential,Model
from keras.layers import Input,Dense, LSTM, RepeatVector,Layer
from sklearn.preprocessing import LabelBinarizer


#Load data
top_words = 60 #5000
index_from = 3
num_epochs = 3
batch_size=64
intermediate_dim = 64

(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=top_words)
print('Data loaded')
#Pad sequences
max_review_length = 50 #500
#print X_train.shape, (X_train[0])
X_train =  sequence.pad_sequences(X_train, maxlen=max_review_length)
X_test = sequence.pad_sequences(X_test, maxlen=max_review_length)
print('Sequenes padded')
enc =LabelBinarizer()
#enc.fit(range(top_words +1))
enc.fit(range(top_words))

X_enc_in = ([enc.transform(x).tolist() for x in X_train])
#X_enc_in = [list(enc.transform(x)) for x in X_train]
X_enc_out = ([enc.transform(x).tolist() for x in X_test])
#X_enc_out = [list(enc.transform(x)) for x in X_test]
#print('x_enc',X_enc_in[13])
#print(X_enc_in[0:2])
print('One-hot encoded')

#Creating autoencoder
x = Input(shape=(max_review_length,top_words),name='main_input')
dense_in = Dense(16,name='dense_in')(x)
#time distr dense
encoded = LSTM( intermediate_dim,input_shape=(intermediate_dim,max_review_length), 
                activation='relu',name='encoded')(dense_in)

#right value for k??
k= max_review_length
encoded_repeat = RepeatVector(k)(encoded)
decoded = LSTM(16,name='decoded')(encoded_repeat)
decoded_repeat = RepeatVector(k)(decoded)
dense_out = Dense(top_words,activation='softmax')(decoded_repeat)
#time distrib dense
#d2 = Dense(max_review_length,name='d2')(dec)

print(x)
print(dense_in)
print(encoded)
print(decoded)
print(dense_out)
print('Commpiling model')
SS = Model(x,dense_out)
#SS = Model(x,d2)
SS.compile(optimizer='adagrad',loss='categorical_crossentropy')
print('Fitting model')
SS.fit(X_enc_in,X_enc_in,
        shuffle=True,
        epochs=num_epochs,
        batch_size=batch_size,
        validation_data =(X_enc_out,X_enc_out))